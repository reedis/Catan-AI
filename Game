from Board import *
from Tile import *
from Player import *
from Utils import *
import random


class Game:
    def __init__(self, playerCount, randomStart=False):
        self.playerCount = playerCount
        self.currentPlayer = 0
        self.board = Board(randomStart)
        self.round = 1
        self.players = []
        self.devCards = {devCards.KNIGHT: 14, devCards.MONOPOLY: 2, devCards.ROADBUILDER: 2, devCards.YEAROFPLENTY: 2, devCards.VP: 5}
        for i in range(0, playerCount):
            self.players.append(HumanPlayer(i))

    def endTurn(self):
        self.players[self.currentPlayer].endTurn()
        self.currentPlayer = (self.currentPlayer+1) % self.playerCount
        if self.currentPlayer == 0:
            self.round += 1 
            if self.round == 3:
                print("SET UP COMPLETE")
        print("It is player%d's turn now, round %d" % (self.currentPlayer, self.round))
        
    def buildSettlement(self, tileNumber, location):
        if self.players[self.currentPlayer].buildSettlement(tileNumber, location) or self.inSetUp():
            if self.board.placeSettlement(tileNumber, location, self.currentPlayer, self.inSetUp):
                print("settlement placed at tile %d, location %d, by player %d" % (tileNumber, location, self.currentPlayer))
            else:
                print("issue placing settlement please try again")
        else:
            print("No settlements left")
        
    def buildRoad(self, tileNumber, location):
        if self.players[self.currentPlayer].buildRoad(tileNumber, location) or self.inSetUp():
            if self.board.placeRoad(tileNumber, location, self.players[self.currentPlayer]):
                print("Road placed at tile %d, location %d, by player %d" % (tileNumber, location, self.currentPlayer))
            else:
                print("issue placing Road please try again")
        else:
            print("No Roads left")

    def buyDevCard(self):
        count = 0
        res = None
        for key, value in self.devCards.items():
            count += value
        
        if not count == 0:
            randomDev = random.choice(range(0,count))

            for key, value in self.devCards.items():
                count -= value
                if count <= 0:
                    res = key
                    self.devCards[key] -= 1
                    break
            
            self.players[self.playerCount].addDevCard(res)
            input("Please press any key to continue")
        else:
            input("Sorry all dev cards have been bought, \nplease press any key to continue")
            
    def beginGame(self):
        self.board.printBoard()
    
    def inSetUp(self):
        return self.round <= 2
    
    def resourceMap(self):
        resList = self.board.resourceMap()
        print("          " + resList[0])
        print("    "+ resList[1])
        print(""+ resList[2])
        print("      "+ resList[3])
        print("         "+ resList[4])

    def rollDice(self, input=-1):
        self.players[self.currentPlayer].hasRolled = True
        dice = [1,2,3,4,5,6]       
        roll = (random.choice(dice) + random.choice(dice)) if (input == -1) else input
        print("You Rolled a " + str(roll)) 
        if roll == 7:
            self.seven()
        else:
            self.updateRes(roll)

    def updateRes(self, roll):
        tiles = self.board.rolledTiles(roll)

        for tile in tiles:
            playerDict = {}
            for player in self.players:
                playerDict[player.playerNum] = 0
            
            res = tile.type
            payment = tile.getPayment(playerDict)
            vals = {x:y for x,y in payment.items() if y!=0}
            if not len(vals) == 0:
                listPay = list(vals.keys())
                for playerIndex in listPay:
                    player = self.players[playerIndex]
                    player.updateResources(res, payment[playerIndex])

    def printPlayerStats(self):
        for player in self.players:
            player.printPlayerStats()
            player.printPlayerResources()

    def seven(self):
        print("")

    def getActions(self):
        actionList = self.players[self.currentPlayer].getMoves()
        actionList = self.board.getValidMoves(self.players[self.currentPlayer], actionList)
        return actionList
     
    def gameOver(self):
        for player in self.players:
            if player.vp >= 10:
                print("Player%d has won!" % player.playerNum)
                return False
        return True
    
    def playTurn(self):
        if self.inSetUp():
            self.players[self.playerCount].playSetupTurn()
        else:
            self.players[self.playerCount].playTurn()

    def printExampleTile(self):
        one = ('-------------spot 1---------------')
        two = ('--------road6--------road1--------')
        three = ('--spot6--------------------spot2--')
        four = ('--road5--------------------road2--')
        five = ('--spot5--------------------spot3--')
        six = ('--------road4--------road3--------')
        seven = ('--------------spot4---------------')
        pList = [one,two,three, four, five, six, seven]
        for p in pList:
            print(p)

    def trade(self):
        self.players[self.currentPlayer].trade()

    # TODO: trading with other players?
    # could result in a loop if the agent really wants to make a trade
    # maybe limit how many times a player can ask for a trade? 

        

gameCheck = False
while(not gameCheck):
    playerCount = int(input("How many players? "))
    rand = input("Do you want a random board? Y/N ").lower().strip()
    rand = (rand == 'y')
    catan = Game(playerCount, rand)
    catan.resourceMap()
    catan.beginGame()
    while(catan.inSetUp()):
        option = input("Will player %d please place their first settlement type M to see the resource map again, \ntype A to see the array again, or press anything else to build " % catan.currentPlayer).lower().strip()
        if option == 'm':
            catan.resourceMap()
            yn = input("Would you like to see the array? Y/N ").lower().strip()
            if yn == 'y':
                catan.beginGame()
        elif option == 'a':
            catan.beginGame()
            yn = input("Would you like to see the resource map? Y/N ").lower().strip()
            if yn == 'y':
                catan.resourceMap()

        tileNum = 200000
        while(not tileNum <= 19 and tileNum >=1):
            tileNum = int(input("Please input the tile nuber you want to build on: ").lower().strip())
            if(tileNum <= 19 and tileNum >=1):
                tile = catan.board.getTile(tileNum)
                yn = input("You want to build on tile %d, the %s with the dice number of %d on it? Y/N " % (tileNum, tile.type.value, tile.diceNumber)).lower().strip()
                if yn == 'n':
                    tileNum = 2000000
                    input("Press any key to try again")
            else:
                input("Invalid number (Valid range: 1-19), press any key to try again")
        
        catan.board.printBoard(tileNum)
        print("please look at the open tile positions above, and the position map below to choose your settlement location")
        catan.printExampleTile()
        pos = 8
        while(not (pos <=6 and pos >=1)):
            pos = int(input("Please choose the position for your settlement (1-6)"))
            if not (pos <=6 and pos >=1):
                print("Invalid choice, please try again")


    while(not gameCheck):
        input("It is currently player %d's turn, please press any key to continue" % catan.currentPlayer)
        actionList = catan.getActions()
        if not len(actionList) == 1:
            ...
        else:
            input("Please press enter to roll, you have no dev cards to use")
            catan.rollDice()


    
'''
catan = Game(1)
catan.resourceMap()
catan.beginGame()
catan.resourceMap()
catan.buildSettlement(13, 3)
catan.buildRoad(13, 3)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.endTurn()
catan.endTurn()
catan.endTurn()
catan.endTurn()
catan.beginGame()
catan.rollDice(7)
catan.getActions()
catan.printPlayerStats()
catan.trade()
catan.printPlayerStats()
'''