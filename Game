from Board import *
from Tile import *
from Player import *
from Utils import *
import random
import os


class Game:
    def __init__(self, playerCount, randomStart=False, aiPlayer = 2):
        self.playerCount = playerCount
        self.currentPlayer = 0
        self.board = Board(randomStart)
        self.round = 1
        self.players = []
        self.devCards = {devCards.KNIGHT: 14, devCards.MONOPOLY: 2, devCards.ROADBUILDER: 2, devCards.YEAROFPLENTY: 2, devCards.VP: 5}
        for i in range(0, playerCount):
            if i == (aiPlayer - 1):
                self.players.append(AutoPlayer(i))
            else:
                self.players.append(HumanPlayer(i))

    def getCurrentPlayer(self):
        return self.players[self.currentPlayer]
    
    def getNextPlayer(self):
        nextPlayer = (self.currentPlayer+1) % self.playerCount
        return self.players[nextPlayer]
    
    def endTurn(self):
        self.getCurrentPlayer().endTurn()
        self.currentPlayer = (self.currentPlayer+1) % self.playerCount
        if self.currentPlayer == 0:
            self.round += 1 
            if self.round == 3:
                print("SET UP COMPLETE")
        print("It is player%d's turn now, round %d" % (self.currentPlayer, self.round))
        
    def buildSettlement(self, tileNumber, location):
        if self.getCurrentPlayer().buildSettlement(tileNumber, location) or self.inSetUp():
            if self.board.placeSettlement(tileNumber, location, self.getCurrentPlayer(), self.inSetUp()):
                print("settlement placed at tile %d, location %d, by player %d" % (tileNumber, location, self.currentPlayer))
            else:
                print("issue placing settlement please try again")
        else:
            print("No settlements left")
        
    def buildRoad(self, tileNumber, location):
        if self.getCurrentPlayer().buildRoad(tileNumber, location) or self.inSetUp():
            if self.board.placeRoad(tileNumber, location, self.getCurrentPlayer(), self.inSetUp()):
                print("Road placed at tile %d, location %d, by player %d" % (tileNumber, location, self.currentPlayer))
            else:
                print("issue placing Road please try again")
        else:
            print("No Roads left")

    def buyDevCard(self):
        count = 0
        res = None
        for key, value in self.devCards.items():
            count += value
        
        if not count == 0:
            randomDev = random.choice(range(0,count))

            for key, value in self.devCards.items():
                count -= value
                if count <= 0:
                    res = key
                    self.devCards[key] -= 1
                    break
            
            self.players[self.playerCount].addDevCard(res)
            print("You bought a %s" % res)
            input("Please press any key to continue")
        else:
            input("Sorry all dev cards have been bought, \nplease press any key to continue")
            
    def beginGame(self):
        self.board.printBoard()
    
    def inSetUp(self):
        return self.round <= 2
    
    def resourceMap(self):
        resList = self.board.resourceMap()
        print("          " + resList[0])
        print("    "+ resList[1])
        print(""+ resList[2])
        print("      "+ resList[3])
        print("         "+ resList[4])

    def rollDice(self, input=-1):
        self.getCurrentPlayer().hasRolled = True
        dice = [1,2,3,4,5,6]       
        roll = (random.choice(dice) + random.choice(dice)) if (input == -1) else input
        print("You Rolled a " + str(roll)) 
        if roll == 7:
            return
        else:
            self.updateRes(roll)

    def updateRes(self, roll):
        tiles = self.board.rolledTiles(roll)

        for tile in tiles:
            playerDict = {}
            for player in self.players:
                playerDict[player.playerNum] = 0
            
            res = tile.type
            payment = tile.getPayment(playerDict)
            vals = {x:y for x,y in payment.items() if y!=0}
            if not len(vals) == 0:
                listPay = list(vals.keys())
                for playerIndex in listPay:
                    player = self.players[playerIndex]
                    player.updateResources(res, payment[playerIndex])

    def printPlayerStats(self):
        for player in self.players:
            player.printPlayerStats()
            player.printPlayerResources()

    def getActions(self):
        actionList = self.getCurrentPlayer().getMoves()
        actionList = self.board.getValidMoves(self.getCurrentPlayer(), actionList)
        return actionList
     
    def gameOver(self):
        for player in self.players:
            if player.vp >= 10:
                print("Player%d has won!" % player.playerNum)
                return True
        return False
    
    def playTurn(self, type):
        if type == 1:
            self.executeOffensivePlay()
        elif type == 2:
            self.executeDefensivePlay()

    def printExampleTile(self):
        one = ('-------------spot 1---------------')
        two = ('--------road6--------road1--------')
        three = ('--spot6--------------------spot2--')
        four = ('--road5--------------------road2--')
        five = ('--spot5--------------------spot3--')
        six = ('--------road4--------road3--------')
        seven = ('--------------spot4---------------')
        pList = [one,two,three, four, five, six, seven]
        for p in pList:
            print(p)

    def trade(self):
        self.getCurrentPlayer().trade()

    def getSpotValueDict(self, offensive=True):
        if offensive:
            return self.executeOffensivePlay()
        else:
            return self.defensiveMoves()
        
    ## gets the max value move
    def executeOffensivePlay(self):
        player = self.getCurrentPlayer()
        maxSettlement = self.board.getMaxMove(player)[0]
        self.buildSettlement(maxSettlement[0], maxSettlement[1])
        maxRoad = self.board.getMaxRoad(maxSettlement[0], maxSettlement[1], player)
        self.buildRoad(maxRoad[0], maxRoad[1])
        return maxSettlement
    
    ## gets the move that minimizes the next turn the most
    def executeDefensivePlay(self):
        minMove = self.board.getMinMove(self.getNextPlayer(), self.getCurrentPlayer())
        self.buildSettlement(minMove[0], minMove[1])
        maxRoad = self.board.getMaxRoad(minMove[0], minMove[1], self.getCurrentPlayer())
        self.buildRoad(maxRoad[0], maxRoad[1])
        return minMove, maxRoad[1]

    def getAIRoad(self, aiType):
        settlementList = self.getCurrentPlayer().settlementLoc
        roadList = self.getCurrentPlayer().roadLoc
        choice = self.board.getOpenRoadPos(settlementList, roadList)[aiType-1]
        print(choice)
        self.buildRoad(choice[0], choice[1])
        return

    def getMaxRoad(self, tile, loc):
        return self.board.getMaxRoad(tile, loc, self.getCurrentPlayer())
    
    def aiActions(self, aiType):
        actionsList = self.getActions()
        if None == actionsList:
            return
        if actions.ROLL in actionsList:
            self.rollDice()
            self.aiActions(aiType)
        elif actions.SETTLEMENT in actionsList:
            if aiType == 1:
                maxMove = self.board.getMaxMove(self.getCurrentPlayer())
                self.buildSettlement(maxMove[0], maxMove[1])
            else:
                minMove = self.board.getMinMove(self.getNextPlayer(), self.getCurrentPlayer())
                self.buildSettlement(minMove[0], minMove[1])
            self.aiActions(aiType)
        elif actions.ROAD in actionsList:
            self.getAIRoad(aiType)
        elif actions.BUYDEVCARD in actionsList:
            self.buyDevCard()
            self.aiActions(aiType)
        elif actions.USEDEVCARD in actionsList:
            self.aiActions(aiType)
        else:
            return

    # TODO: 
    # trading with other players?:
    #   could result in a loop if the agent really wants to make a trade
    #   maybe limit how many times a player can ask for a trade? 
    # spotValue:
    #   allowing for building too close
    #   not taking into account # of tiles -- single tile location weighted higher than some triplets
    #   --very close
    #   add resource/number spreading/conglomeration strategies
    # RoadValue
    #   find a way to evaulate road placements
    # defensive/offensive:
    #   ExpectiMax vs ExpectiMini

gameCheck = False
def setUp(aiType):
    while(catan.inSetUp()):
        if catan.getCurrentPlayer().isAI:
            catan.playTurn(aiType)
            catan.endTurn()
        else:
            option = input("Will player %d please place their first settlement type M to see the resource map again, \ntype A to see the array again, or press anything else to build " % catan.currentPlayer).lower().strip()
            if option == 'm':
                catan.resourceMap()
                yn = input("Would you like to see the array? Y/N ").lower().strip()
                if yn == 'y':
                    catan.beginGame()
            elif option == 'a':
                catan.beginGame()
                yn = input("Would you like to see the resource map? Y/N ").lower().strip()
                if yn == 'y':
                    catan.resourceMap()

            tileNum = 200000
            while(not tileNum <= 19 and tileNum >=1):
                tileNum = int(input("Please input the tile nuber you want to build on: ").lower().strip())
                if(tileNum <= 19 and tileNum >=1):
                    tile = catan.board.getTile(tileNum)
                    yn = input("You want to build on tile %d, the %s with the dice number of %d on it? Y/N " % (tileNum, tile.type.value, tile.diceNumber)).lower().strip()
                    if yn == 'n':
                        tileNum = 2000000
                        input("Press any key to try again")
                else:
                    input("Invalid number (Valid range: 1-19), press any key to try again")
            
            catan.board.printBoard(tileNum)
            print("please look at the open tile positions above, and the position map below to choose your settlement location")
            catan.printExampleTile()
            pos = 8
            while(not (pos <=6 and pos >=1)):
                pos = int(input("Please choose the position for your settlement (1-6) "))
                if not (pos <=6 and pos >=1):
                    print("Invalid choice, please try again")
            
            yn = input("You want to build on tile %d at location %d? Is that correct? Y/N " % (tileNum, pos)).lower().strip()
            if yn == 'y':
                catan.buildSettlement(tileNum, pos)   
            else:
                print("Lets begin again")
                setUp(aiType)
            
            validRoad = False
            while(not validRoad):
                print("Time to build a road, the road Locations you can build from are (tileNumber, roadPosition):")
                options = tileRoadMapping[(tileNum, pos)]
                print(options)
                tn = int(input("Please input the tile number from the above choices for your road: "))
                ps = int(input("Please input the road position from the above choices for your road: "))
                validRoad = (tn, ps) in options

            catan.buildRoad(tn, ps)
            catan.endTurn()

    input("Set up is completed, please press enter to continue")
    os.system('clear')

def playerActions():
    actionList = catan.getActions()
    print("These are your available actions: ")
    print(actionList)
    print("Note the action you choose has to be in the list above")
    if actionList == None:
        input("You have no actions available, press enter to end turn")
        return
    answer = input("Type s to build a settlement, type r to build a road, type t to trade, type d to buy a dev card, type u to use a dev card").lower().strip()
    if answer == 's': 
        playerSettlement()
    elif answer == 'r': 
        playerRoad()
    elif answer == 't': 
        catan.trade()
    elif answer == 'd': 
        catan.buyDevCard()
    elif answer == 'u': 
        playerDevCard()
    else: 
        input("Invalid option: %s, press enter to try again" % answer)
        playerActions()
    return

def playerSettlement():
    tile = int(input("Enter the tile you want to build a settlement on: ").lower().strip())
    loc = int(input("Enter the location on the tile for the settlement: ").lower().strip())
    tf = catan.buildSettlement(tile, loc)
    if tf:
        playerActions()
    else:
        again = int(input("Invalid location given, try again (1) or return to action menu (2): ").lower().strip())
        if again == 1:
            playerSettlement()
        else:
            playerActions()

def playerRoad():
    tile = int(input("Enter the tile you want to build a road on: ").lower().strip())
    loc = int(input("Enter the location on the tile for the road: ").lower().strip())
    tf = catan.buildRoad(tile, loc)
    if tf:
        playerActions()
    else:
        again = int(input("Invalid location given, try again (1) or return to action menu (2): ").lower().strip())
        if again == 1:
            playerRoad()
        else:
            playerActions()

def playerDevCard():
    catan.useDevCard()

def playGame():
    setUp(aiType)
    while(not gameCheck):
        input("It is currently player %d's turn, please press any key to continue" % catan.currentPlayer)
        if catan.getCurrentPlayer().isAI:
            catan.aiActions(aiType)
            catan.endTurn()
        else:
            actionList = catan.getActions()
            if len(actionList) == 1:
                input("Please press enter to roll, you have no dev cards to use")
                catan.rollDice() 
            playerActions()
            catan.endTurn()
        gameCheck = catan.gameOver()

print("Welcome to the 2 player Game Catan AI, player 0 is human, player 1 is the AI")
input("Please press enter to continue")

rand = input("Do you want a random board? Y/N ").lower().strip()
rand = (rand == 'y')
catan = Game(2, rand, 2)
aiType = int(input("Do you want the AI to play offensively (1) or defensively (2)?").lower().strip())
catan.resourceMap()
catan.beginGame()
playGame()
    


'''    
catan = Game(1)
print(catan.executeDefensivePlay())
catan.beginGame()

catan.beginGame()
catan.resourceMap()
catan       .buildSettlement(13, 3)
catan.buildRoad(13, 3)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.rollDice(8)
catan.rollDice(5)
catan.endTurn()
catan.endTurn()
catan.endTurn()
catan.endTurn()
catan.beginGame()
catan.rollDice(7)
catan.getActions()
catan.printPlayerStats()
catan.trade()
catan.printPlayerStats()
'''